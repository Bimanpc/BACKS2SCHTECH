    1 #! /usr/bin/env python
    2 #  -*- coding: utf-8 -*-
    3 #
    4 # GUI module generated by PAGE version 6.2
    5 #  in conjunction with Tcl version 8.6
    6 #    Feb 13, 2022 07:23:14 PM EET  platform: Windows NT
    7 
    8 import sys
    9 
   10 try:
   11     import Tkinter as tk
   12 except ImportError:
   13     import tkinter as tk
   14 
   15 try:
   16     import ttk
   17     py3 = False
   18 except ImportError:
   19     import tkinter.ttk as ttk
   20     py3 = True
   21 
   22 import airtable_support
   23 
   24 def vp_start_gui():
   25     '''Starting point when module is the main routine.'''
   26     global val, w, root
   27     root = tk.Tk()
   28     airtable_support.set_Tk_var()
   29     top = Toplevel1 (root)
   30     airtable_support.init(root, top)
   31     root.mainloop()
   32 
   33 w = None
   34 def create_Toplevel1(rt, *args, **kwargs):
   35     '''Starting point when module is imported by another module.
   36        Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
   37     global w, w_win, root
   38     #rt = root
   39     root = rt
   40     w = tk.Toplevel (root)
   41     airtable_support.set_Tk_var()
   42     top = Toplevel1 (w)
   43     airtable_support.init(w, top, *args, **kwargs)
   44     return (w, top)
   45 
   46 def destroy_Toplevel1():
   47     global w
   48     w.destroy()
   49     w = None
   50 
   51 class Toplevel1:
   52     def __init__(self, top=None):
   53         '''This class configures and populates the toplevel window.
   54            top is the toplevel containing window.'''
   55         _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
   56         _fgcolor = '#000000'  # X11 color: 'black'
   57         _compcolor = '#d9d9d9' # X11 color: 'gray85'
   58         _ana1color = '#d9d9d9' # X11 color: 'gray85'
   59         _ana2color = '#ececec' # Closest X11 color: 'gray92'
   60         self.style = ttk.Style()
   61         if sys.platform == "win32":
   62             self.style.theme_use('winnative')
   63         self.style.configure('.',background=_bgcolor)
   64         self.style.configure('.',foreground=_fgcolor)
   65         self.style.configure('.',font="TkDefaultFont")
   66         self.style.map('.',background=
   67             [('selected', _compcolor), ('active',_ana2color)])
   68 
   69         top.geometry("600x450+383+106")
   70         top.minsize(120, 1)
   71         top.maxsize(1370, 749)
   72         top.resizable(1,  1)
   73         top.title("New Toplevel")
   74         top.configure(background="#d9d9d9")
   75 
   76         self.Button1 = tk.Button(top)
   77         self.Button1.place(relx=0.217, rely=0.222, height=34, width=197)
   78         self.Button1.configure(activebackground="#ececec")
   79         self.Button1.configure(activeforeground="#000000")
   80         self.Button1.configure(background="#d9d9d9")
   81         self.Button1.configure(disabledforeground="#a3a3a3")
   82         self.Button1.configure(foreground="#000000")
   83         self.Button1.configure(highlightbackground="#d9d9d9")
   84         self.Button1.configure(highlightcolor="black")
   85         self.Button1.configure(pady="0")
   86         self.Button1.configure(text='''airtable.com''')
   87 
   88         self.Spinbox1 = tk.Spinbox(top, from_=1.0, to=100.0)
   89         self.Spinbox1.place(relx=0.167, rely=0.133, relheight=0.042
   90                 , relwidth=0.642)
   91         self.Spinbox1.configure(activebackground="#f9f9f9")
   92         self.Spinbox1.configure(background="white")
   93         self.Spinbox1.configure(buttonbackground="#d9d9d9")
   94         self.Spinbox1.configure(disabledforeground="#a3a3a3")
   95         self.Spinbox1.configure(font="TkDefaultFont")
   96         self.Spinbox1.configure(foreground="black")
   97         self.Spinbox1.configure(highlightbackground="black")
   98         self.Spinbox1.configure(highlightcolor="black")
   99         self.Spinbox1.configure(insertbackground="black")
  100         self.Spinbox1.configure(selectbackground="blue")
  101         self.Spinbox1.configure(selectforeground="white")
  102         self.Spinbox1.configure(textvariable=airtable_support.spinbox)
  103 
  104         global _images
  105         _images = (
  106 
  107          tk.PhotoImage("img_close", data='''R0lGODlhDAAMAIQUADIyMjc3Nzk5OT09PT
  108                  8/P0JCQkVFRU1NTU5OTlFRUVZWVmBgYGF hYWlpaXt7e6CgoLm5ucLCwszMzNbW
  109                  1v//////////////////////////////////// ///////////yH5BAEKAB8ALA
  110                  AAAAAMAAwAAAUt4CeOZGmaA5mSyQCIwhCUSwEIxHHW+ fkxBgPiBDwshCWHQfc5
  111                  KkoNUtRHpYYAADs= '''),
  112 
  113          tk.PhotoImage("img_closeactive", data='''R0lGODlhDAAMAIQcALwuEtIzFL46
  114                  INY0Fdk2FsQ8IdhAI9pAIttCJNlKLtpLL9pMMMNTP cVTPdpZQOBbQd60rN+1rf
  115                  Czp+zLxPbMxPLX0vHY0/fY0/rm4vvx8Pvy8fzy8P//////// ///////yH5BAEK
  116                  AB8ALAAAAAAMAAwAAAVHYLQQZEkukWKuxEgg1EPCcilx24NcHGYWFhx P0zANBE
  117                  GOhhFYGSocTsax2imDOdNtiez9JszjpEg4EAaA5jlNUEASLFICEgIAOw== '''),
  118 
  119          tk.PhotoImage("img_closepressed", data='''R0lGODlhDAAMAIQeAJ8nD64qELE
  120                  rELMsEqIyG6cyG7U1HLY2HrY3HrhBKrlCK6pGM7lD LKtHM7pKNL5MNtiViNaon
  121                  +GqoNSyq9WzrNyyqtuzq+O0que/t+bIwubJw+vJw+vTz+zT z////////yH5BAE
  122                  KAB8ALAAAAAAMAAwAAAVJIMUMZEkylGKuwzgc0kPCcgl123NcHWYW Fs6Gp2mYB
  123                  IRgR7MIrAwVDifjWO2WwZzpxkxyfKVCpImMGAeIgQDgVLMHikmCRUpMQgA7 ''')
  124         )
  125 
  126         self.style.element_create("close", "image", "img_close",
  127                ("active", "pressed", "!disabled", "img_closepressed"),
  128                ("active", "alternate", "!disabled",
  129                "img_closeactive"), border=8, sticky='')
  130 
  131         self.style.layout("ClosetabNotebook", [("ClosetabNotebook.client",
  132                                      {"sticky": "nswe"})])
  133         self.style.layout("ClosetabNotebook.Tab", [
  134             ("ClosetabNotebook.tab",
  135               { "sticky": "nswe",
  136                 "children": [
  137                     ("ClosetabNotebook.padding", {
  138                         "side": "top",
  139                         "sticky": "nswe",
  140                         "children": [
  141                             ("ClosetabNotebook.focus", {
  142                                 "side": "top",
  143                                 "sticky": "nswe",
  144                                 "children": [
  145                                     ("ClosetabNotebook.label", {"side":
  146                                       "left", "sticky": ''}),
  147                                     ("ClosetabNotebook.close", {"side":
  148                                         "left", "sticky": ''}),]})]})]})])
  149 
  150         PNOTEBOOK = "ClosetabNotebook" 
  151 
  152         self.style.configure('TNotebook.Tab', background=_bgcolor)
  153         self.style.configure('TNotebook.Tab', foreground=_fgcolor)
  154         self.style.map('TNotebook.Tab', background=
  155             [('selected', _compcolor), ('active',_ana2color)])
  156         self.PNotebook1 = ttk.Notebook(top)
  157         self.PNotebook1.place(relx=0.417, rely=0.489, relheight=0.502
  158                 , relwidth=0.507)
  159         self.PNotebook1.configure(takefocus="")
  160         self.PNotebook1.configure(style=PNOTEBOOK)
  161         self.PNotebook1_t1 = tk.Frame(self.PNotebook1)
  162         self.PNotebook1.add(self.PNotebook1_t1, padding=3)
  163         self.PNotebook1.tab(0, text="Page 1",compound="left",underline="-1",)
  164         self.PNotebook1_t1.configure(background="#d9d9d9")
  165         self.PNotebook1_t1.configure(highlightbackground="#d9d9d9")
  166         self.PNotebook1_t1.configure(highlightcolor="black")
  167         self.PNotebook1_t2 = tk.Frame(self.PNotebook1)
  168         self.PNotebook1.add(self.PNotebook1_t2, padding=3)
  169         self.PNotebook1.tab(1, text="Page 2",compound="left",underline="-1",)
  170         self.PNotebook1_t2.configure(background="#d9d9d9")
  171         self.PNotebook1_t2.configure(highlightbackground="#d9d9d9")
  172         self.PNotebook1_t2.configure(highlightcolor="black")
  173         self.PNotebook1.bind('<Button-1>',_button_press)
  174         self.PNotebook1.bind('<ButtonRelease-1>',_button_release)
  175         self.PNotebook1.bind('<Motion>',_mouse_over)
  176 
  177 # The following code is add to handle mouse events with the close icons
  178 # in PNotebooks widgets.
  179 def _button_press(event):
  180     widget = event.widget
  181     element = widget.identify(event.x, event.y)
  182     if "close" in element:
  183         index = widget.index("@%d,%d" % (event.x, event.y))
  184         widget.state(['pressed'])
  185         widget._active = index
  186 
  187 def _button_release(event):
  188     widget = event.widget
  189     if not widget.instate(['pressed']):
  190             return
  191     element = widget.identify(event.x, event.y)
  192     try:
  193         index = widget.index("@%d,%d" % (event.x, event.y))
  194     except TclError:
  195         pass
  196     if "close" in element and widget._active == index:
  197         widget.forget(index)
  198         widget.event_generate("<<NotebookTabClosed>>")
  199 
  200     widget.state(['!pressed'])
  201     widget._active = None
  202 
  203 def _mouse_over(event):
  204     widget = event.widget
  205     element = widget.identify(event.x, event.y)
  206     if "close" in element:
  207         widget.state(['alternate'])
  208     else:
  209         widget.state(['!alternate'])
  210 
  211 if __name__ == '__main__':
  212     vp_start_gui()
  213 
  214 

